#!/usr/bin/env python

"""
tron-curses

A curses port of tron with MDP AI.
"""

# Global
import curses as cs
import argparse as ap
import constants as ct
from controllers import KeyController, AIController
from graphics import Drawer
from game import Game


class GameSession(object):
  def __init__(self, scr, rate):
    self.scr = scr
    self.rate = rate
    self.drawer = Drawer(scr)

    self.controllers = [
      KeyController(cs.KEY_UP, cs.KEY_DOWN, cs.KEY_RIGHT, cs.KEY_LEFT),
      KeyController(ord('w'), ord('s'), ord('d'), ord('a')),
    ]

    self.start()

  def start(self):
    self.game = Game(
      self.drawer.redraw, self.rate,
      self.drawer.width, self.drawer.height)
    for controller in self.controllers:
      controller.player = self.game.new_player()
    self.game.start()

  def handle_key(self, k):
    if k == ct.K_RESTART:
      # TODO un-hack this w/ state machine
      if not self.game.pregame:
        self.game.stop()
        self.start()
    elif k == ct.K_PAUSE:
      if not self.game.pregame:
        self.game.paused = not self.game.paused
    else:
      for controller in self.controllers:
        controller.handle_key(k)


def parse_args():
  parser = ap.ArgumentParser(description=__doc__,
                             formatter_class=ap.RawDescriptionHelpFormatter)

  parser.add_argument('-t',
                      help="""
                      time step rate.
                      Default: {}
                      """.format(ct.DEFAULTS['rate']),
                      dest='rate',
                      type=float,
                      default=ct.DEFAULTS['rate'])

  parser.add_argument('-c',
                      help="""
                      number of computer opponents.
                      Default: {}
                      """.format(ct.DEFAULTS['cpus']),
                      dest='cpus',
                      type=int,
                      default=ct.DEFAULTS['cpus'])

  return parser.parse_args()


def main(scr):
  args = parse_args()
  cs.use_default_colors()
  cs.curs_set(0)
  scr.refresh()

  gs = GameSession(scr, args.rate)

  # Read input
  while True:
    k = scr.getch()
    if k == ct.K_QUIT:
      break
    else:
      gs.handle_key(k)


if __name__ == '__main__':
  cs.wrapper(main)
